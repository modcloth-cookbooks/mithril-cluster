#!/bin/bash
#: Usage: s3-download-tarball <application> <revision> <dest-dir> [--go] [--decrypt]
#:
#: Downloads, decrypts, and verifies a platform-specific tarball from S3 for a
#: given application and revision.  If <revision> equals 'latest', then the most
#: recently-uploaded tarball will be used.
#:
#: If the optional '--go' argument is present, the OS name and architecture
#: used to construct the S3 file path will be fetched via `go env`.
#:
#: If the optional '--decrypt' argument is passed, the downloaded tarball will
#: be decrypted using `openssl aes-256-cbc` using the environmental variable
#: `$TRAVIS_BUDDY_KEY` as the password.  If '--decrypt' is passed and
#: `$TRAVIS_BUDDY_KEY` is not present, the script will exit 4
#:
#:     -h   --help         Show this help message
#:

#: TODO which environmental variables need to be set

PROG="$(basename "$0")"

function log() {
  echo "$PROG: $*" >&2
}

function usage() {
  awk '/^#:/ { gsub(/^#: ?/, "", $0) ; print $0 }' "$0" >&2
}

function assert_md5() {
  local file="$1"
  local expected_md5="$2"

  log "Verifying '$file' has md5sum of '$expected_md5'"
  local actual_md5="$(openssl dgst -md5 "$file" | awk '{ print $NF }')"

  if [[ "$actual_md5" != "$expected_md5" ]] ; then
    log "Checksums do not match for '$file'"
    log "  expected='$expected_md5'"
    log "  actual='$actual_md5'"
    exit 9
  fi

  log "File '$file' verified"
}

function main() {
  case "$1" in
    -h|--help)
      usage
      exit 1
      ;;
  esac

  if [ $# -lt 3 ] ; then
    log "Not enough arguments (only got $#)"
    usage
    exit 3
  fi

  if [ -z "$TRAVIS_BUDDY_KEY" ] && [[ "$5" == '--decrypt' ]] ; then
    log 'Missing $TRAVIS_BUDDY_KEY'
    usage
    exit 4
  fi

  local s3_bucket="${S3_BUCKE:-"modcloth-public-travis-artifacts"}"

  local osname="${OSNAME:-"$(uname | tr '[:upper:]' '[:lower:]')"}"
  local archname="${ARCHNAME:-"$(uname -m)"}"
  local app="$1"
  local rev="$2"
  local dest_dir="$3"
  if [[ "$4" == '--go' ]] ; then
    osname="${GOOS:-"$(go env GOOS)"}"
    archname="${GOARCH:-"$(go env GOARCH)"}"
  fi
  local rev_re="$rev[^\\/]*"
  local tarball_extension='tar.bz2'
  if [[ "$5" == '--decrypt' ]] ; then
    tarball_extension='tar.bz2.enc'
  fi

  set -e
  mkdir -p "$dest_dir"
  pushd "$dest_dir" >/dev/null

  if [[ "$rev" == 'master' ]] ; then
    log "Using 'latest' instead of 'master'"
    rev='latest'
  fi

  if [[ "$rev" == 'latest' ]] ; then
    log "Looking for the latest revision of '$app'"
    rev_re='[a-z0-9]+'
  fi

  rev="$(
    aws ls -l "$s3_bucket" | sort -k5,6 | \
      awk "/$osname\\/$archname\\/$app\\/$rev_re\\/$app\\.$tarball_extension/ {
        split(\$NF, parts, \"\/\");
        print parts[6];
      }" | tail -1
  )"

  if [ -z "$rev" ] ; then
    log "Could not locate a build for '$app' revision '$rev'"
    exit 13
  fi

  log "Using revision '$rev'"

  local url_base="$s3_bucket/artifacts/binaries/$osname/$archname/$app/$rev"
  local tarball="$url_base/$app.$tarball_extension"
  local md5file="$url_base/$app.tar.bz2.md5sum"

  log "Fetching '$tarball'"

  if [[ "$5" == '--decrypt' ]] ; then
    aws cat "$tarball" | \
      openssl aes-256-cbc -d -a -pass 'env:TRAVIS_BUDDY_KEY' > "$app.tar.bz2"
  else
    aws cat "$tarball" > "$app.tar.bz2"
  fi

  log "Fetching '$md5file'"
  aws cat "$md5file" > "$app.tar.bz2.md5sum"

  assert_md5 "$app.tar.bz2" "$(awk '{ print $NF }' "$app.tar.bz2.md5sum")"

  log "Extracting '$app.tar.bz2'"
  tar xjvf "$app.tar.bz2" >&2
  pushd "$app" >/dev/null

  for f in $(ls -1 | grep -v -E 'MANIFEST|MD5SUMS') ; do
    assert_md5 "$f" "$(awk "/MD5\\($f\\)=/ { print \$NF }" MD5SUMS)"
  done

  log 'Looks good ^_^'
  log "Extracted to '$dest_dir'"
}

main "$@"
